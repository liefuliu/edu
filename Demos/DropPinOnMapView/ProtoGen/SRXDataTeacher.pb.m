// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "SRXDataTeacher.pb.h"
// @@protoc_insertion_point(imports)

@implementation SrxdataTeacherRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [SrxdataTeacherRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [SrxdataImageRoot registerAllExtensions:registry];
    [SrxdataPersonNameRoot registerAllExtensions:registry];
    [SrxdataClassRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface SRXDataTeacher ()
@property (strong) SRXDataPersonName* name;
@property (strong) NSString* resume;
@property (strong) NSMutableArray * imageRefArray;
@property (strong) PBAppendableArray * courseToTeachArray;
@end

@implementation SRXDataTeacher

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasResume {
  return !!hasResume_;
}
- (void) setHasResume:(BOOL) _value_ {
  hasResume_ = !!_value_;
}
@synthesize resume;
@synthesize imageRefArray;
@dynamic imageRef;
@synthesize courseToTeachArray;
@dynamic courseToTeach;
- (instancetype) init {
  if ((self = [super init])) {
    self.name = [SRXDataPersonName defaultInstance];
    self.resume = @"";
  }
  return self;
}
static SRXDataTeacher* defaultSRXDataTeacherInstance = nil;
+ (void) initialize {
  if (self == [SRXDataTeacher class]) {
    defaultSRXDataTeacherInstance = [[SRXDataTeacher alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSRXDataTeacherInstance;
}
- (instancetype) defaultInstance {
  return defaultSRXDataTeacherInstance;
}
- (NSArray *)imageRef {
  return imageRefArray;
}
- (SRXDataImageRef*)imageRefAtIndex:(NSUInteger)index {
  return [imageRefArray objectAtIndex:index];
}
- (PBArray *)courseToTeach {
  return courseToTeachArray;
}
- (SRXDataClassTypeEnumSRXDataClassType)courseToTeachAtIndex:(NSUInteger)index {
  return (SRXDataClassTypeEnumSRXDataClassType)[courseToTeachArray enumAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeMessage:1 value:self.name];
  }
  if (self.hasResume) {
    [output writeString:2 value:self.resume];
  }
  [self.imageRefArray enumerateObjectsUsingBlock:^(SRXDataImageRef *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  const NSUInteger courseToTeachArrayCount = self.courseToTeachArray.count;
  const SRXDataClassTypeEnumSRXDataClassType *courseToTeachArrayValues = (const SRXDataClassTypeEnumSRXDataClassType *)self.courseToTeachArray.data;
  for (NSUInteger i = 0; i < courseToTeachArrayCount; ++i) {
    [output writeEnum:4 value:courseToTeachArrayValues[i]];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeMessageSize(1, self.name);
  }
  if (self.hasResume) {
    size_ += computeStringSize(2, self.resume);
  }
  [self.imageRefArray enumerateObjectsUsingBlock:^(SRXDataImageRef *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  {
    SInt32 dataSize = 0;
    const NSUInteger count = self.courseToTeachArray.count;
    const SRXDataClassTypeEnumSRXDataClassType *values = (const SRXDataClassTypeEnumSRXDataClassType *)self.courseToTeachArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeEnumSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SRXDataTeacher*) parseFromData:(NSData*) data {
  return (SRXDataTeacher*)[[[SRXDataTeacher builder] mergeFromData:data] build];
}
+ (SRXDataTeacher*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SRXDataTeacher*)[[[SRXDataTeacher builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SRXDataTeacher*) parseFromInputStream:(NSInputStream*) input {
  return (SRXDataTeacher*)[[[SRXDataTeacher builder] mergeFromInputStream:input] build];
}
+ (SRXDataTeacher*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SRXDataTeacher*)[[[SRXDataTeacher builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SRXDataTeacher*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SRXDataTeacher*)[[[SRXDataTeacher builder] mergeFromCodedInputStream:input] build];
}
+ (SRXDataTeacher*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SRXDataTeacher*)[[[SRXDataTeacher builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SRXDataTeacherBuilder*) builder {
  return [[SRXDataTeacherBuilder alloc] init];
}
+ (SRXDataTeacherBuilder*) builderWithPrototype:(SRXDataTeacher*) prototype {
  return [[SRXDataTeacher builder] mergeFrom:prototype];
}
- (SRXDataTeacherBuilder*) builder {
  return [SRXDataTeacher builder];
}
- (SRXDataTeacherBuilder*) toBuilder {
  return [SRXDataTeacher builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@ {\n", indent, @"name"];
    [self.name writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasResume) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resume", self.resume];
  }
  [self.imageRefArray enumerateObjectsUsingBlock:^(SRXDataImageRef *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"imageRef"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.courseToTeachArray enumerateObjectsUsingBlock:^(id element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"courseToTeach", NSStringFromSRXDataClassTypeEnumSRXDataClassType([(NSNumber *)element intValue])];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasName) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.name storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"name"];
  }
  if (self.hasResume) {
    [dictionary setObject: self.resume forKey: @"resume"];
  }
  for (SRXDataImageRef* element in self.imageRefArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"imageRef"];
  }
  const NSUInteger courseToTeachArrayCount = self.courseToTeachArray.count;
  if (courseToTeachArrayCount > 0) {
    const SRXDataClassTypeEnumSRXDataClassType *courseToTeachArrayValues = (const SRXDataClassTypeEnumSRXDataClassType *)self.courseToTeachArray.data;
    NSMutableArray * courseToTeachArrayArray = [NSMutableArray new];
    for (NSUInteger i = 0; i < courseToTeachArrayCount; ++i) {
      [courseToTeachArrayArray addObject: @(courseToTeachArrayValues[i])];
    }
    [dictionary setObject: courseToTeachArrayArray forKey: @"courseToTeach"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SRXDataTeacher class]]) {
    return NO;
  }
  SRXDataTeacher *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasResume == otherMessage.hasResume &&
      (!self.hasResume || [self.resume isEqual:otherMessage.resume]) &&
      [self.imageRefArray isEqualToArray:otherMessage.imageRefArray] &&
      [self.courseToTeachArray isEqualToArray:otherMessage.courseToTeachArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasResume) {
    hashCode = hashCode * 31 + [self.resume hash];
  }
  [self.imageRefArray enumerateObjectsUsingBlock:^(SRXDataImageRef *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.courseToTeachArray enumerateObjectsUsingBlock:^(NSNumber* element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + element.longValue;
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SRXDataTeacherBuilder()
@property (strong) SRXDataTeacher* resultSrxdataTeacher;
@end

@implementation SRXDataTeacherBuilder
@synthesize resultSrxdataTeacher;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSrxdataTeacher = [[SRXDataTeacher alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSrxdataTeacher;
}
- (SRXDataTeacherBuilder*) clear {
  self.resultSrxdataTeacher = [[SRXDataTeacher alloc] init];
  return self;
}
- (SRXDataTeacherBuilder*) clone {
  return [SRXDataTeacher builderWithPrototype:resultSrxdataTeacher];
}
- (SRXDataTeacher*) defaultInstance {
  return [SRXDataTeacher defaultInstance];
}
- (SRXDataTeacher*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SRXDataTeacher*) buildPartial {
  SRXDataTeacher* returnMe = resultSrxdataTeacher;
  self.resultSrxdataTeacher = nil;
  return returnMe;
}
- (SRXDataTeacherBuilder*) mergeFrom:(SRXDataTeacher*) other {
  if (other == [SRXDataTeacher defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self mergeName:other.name];
  }
  if (other.hasResume) {
    [self setResume:other.resume];
  }
  if (other.imageRefArray.count > 0) {
    if (resultSrxdataTeacher.imageRefArray == nil) {
      resultSrxdataTeacher.imageRefArray = [[NSMutableArray alloc] initWithArray:other.imageRefArray];
    } else {
      [resultSrxdataTeacher.imageRefArray addObjectsFromArray:other.imageRefArray];
    }
  }
  if (other.courseToTeachArray.count > 0) {
    if (resultSrxdataTeacher.courseToTeachArray == nil) {
      resultSrxdataTeacher.courseToTeachArray = [other.courseToTeachArray copy];
    } else {
      [resultSrxdataTeacher.courseToTeachArray appendArray:other.courseToTeachArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SRXDataTeacherBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SRXDataTeacherBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        SRXDataPersonNameBuilder* subBuilder = [SRXDataPersonName builder];
        if (self.hasName) {
          [subBuilder mergeFrom:self.name];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setName:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setResume:[input readString]];
        break;
      }
      case 26: {
        SRXDataImageRefBuilder* subBuilder = [SRXDataImageRef builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addImageRef:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        SRXDataClassTypeEnumSRXDataClassType value = (SRXDataClassTypeEnumSRXDataClassType)[input readEnum];
        if (SRXDataClassTypeEnumSRXDataClassTypeIsValidValue(value)) {
          [self addCourseToTeach:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return resultSrxdataTeacher.hasName;
}
- (SRXDataPersonName*) name {
  return resultSrxdataTeacher.name;
}
- (SRXDataTeacherBuilder*) setName:(SRXDataPersonName*) value {
  resultSrxdataTeacher.hasName = YES;
  resultSrxdataTeacher.name = value;
  return self;
}
- (SRXDataTeacherBuilder*) setNameBuilder:(SRXDataPersonNameBuilder*) builderForValue {
  return [self setName:[builderForValue build]];
}
- (SRXDataTeacherBuilder*) mergeName:(SRXDataPersonName*) value {
  if (resultSrxdataTeacher.hasName &&
      resultSrxdataTeacher.name != [SRXDataPersonName defaultInstance]) {
    resultSrxdataTeacher.name =
      [[[SRXDataPersonName builderWithPrototype:resultSrxdataTeacher.name] mergeFrom:value] buildPartial];
  } else {
    resultSrxdataTeacher.name = value;
  }
  resultSrxdataTeacher.hasName = YES;
  return self;
}
- (SRXDataTeacherBuilder*) clearName {
  resultSrxdataTeacher.hasName = NO;
  resultSrxdataTeacher.name = [SRXDataPersonName defaultInstance];
  return self;
}
- (BOOL) hasResume {
  return resultSrxdataTeacher.hasResume;
}
- (NSString*) resume {
  return resultSrxdataTeacher.resume;
}
- (SRXDataTeacherBuilder*) setResume:(NSString*) value {
  resultSrxdataTeacher.hasResume = YES;
  resultSrxdataTeacher.resume = value;
  return self;
}
- (SRXDataTeacherBuilder*) clearResume {
  resultSrxdataTeacher.hasResume = NO;
  resultSrxdataTeacher.resume = @"";
  return self;
}
- (NSMutableArray *)imageRef {
  return resultSrxdataTeacher.imageRefArray;
}
- (SRXDataImageRef*)imageRefAtIndex:(NSUInteger)index {
  return [resultSrxdataTeacher imageRefAtIndex:index];
}
- (SRXDataTeacherBuilder *)addImageRef:(SRXDataImageRef*)value {
  if (resultSrxdataTeacher.imageRefArray == nil) {
    resultSrxdataTeacher.imageRefArray = [[NSMutableArray alloc]init];
  }
  [resultSrxdataTeacher.imageRefArray addObject:value];
  return self;
}
- (SRXDataTeacherBuilder *)setImageRefArray:(NSArray *)array {
  resultSrxdataTeacher.imageRefArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (SRXDataTeacherBuilder *)clearImageRef {
  resultSrxdataTeacher.imageRefArray = nil;
  return self;
}
- (PBAppendableArray *)courseToTeach {
  return resultSrxdataTeacher.courseToTeachArray;
}
- (SRXDataClassTypeEnumSRXDataClassType)courseToTeachAtIndex:(NSUInteger)index {
  return [resultSrxdataTeacher courseToTeachAtIndex:index];
}
- (SRXDataTeacherBuilder *)addCourseToTeach:(SRXDataClassTypeEnumSRXDataClassType)value {
  if (resultSrxdataTeacher.courseToTeachArray == nil) {
    resultSrxdataTeacher.courseToTeachArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultSrxdataTeacher.courseToTeachArray addEnum:value];
  return self;
}
- (SRXDataTeacherBuilder *)setCourseToTeachArray:(NSArray *)array {
  resultSrxdataTeacher.courseToTeachArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (SRXDataTeacherBuilder *)setCourseToTeachValues:(const SRXDataClassTypeEnumSRXDataClassType *)values count:(NSUInteger)count {
  resultSrxdataTeacher.courseToTeachArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (SRXDataTeacherBuilder *)clearCourseToTeach {
  resultSrxdataTeacher.courseToTeachArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
