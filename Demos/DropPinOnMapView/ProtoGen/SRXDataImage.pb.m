// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "SRXDataImage.pb.h"
// @@protoc_insertion_point(imports)

@implementation SrxdataImageRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [SrxdataImageRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface SRXDataImage ()
@property (strong) NSData* data;
@end

@implementation SRXDataImage

- (BOOL) hasData {
  return !!hasData_;
}
- (void) setHasData:(BOOL) _value_ {
  hasData_ = !!_value_;
}
@synthesize data;
- (instancetype) init {
  if ((self = [super init])) {
    self.data = [NSData data];
  }
  return self;
}
static SRXDataImage* defaultSRXDataImageInstance = nil;
+ (void) initialize {
  if (self == [SRXDataImage class]) {
    defaultSRXDataImageInstance = [[SRXDataImage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSRXDataImageInstance;
}
- (instancetype) defaultInstance {
  return defaultSRXDataImageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasData) {
    [output writeData:1 value:self.data];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasData) {
    size_ += computeDataSize(1, self.data);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SRXDataImage*) parseFromData:(NSData*) data {
  return (SRXDataImage*)[[[SRXDataImage builder] mergeFromData:data] build];
}
+ (SRXDataImage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SRXDataImage*)[[[SRXDataImage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SRXDataImage*) parseFromInputStream:(NSInputStream*) input {
  return (SRXDataImage*)[[[SRXDataImage builder] mergeFromInputStream:input] build];
}
+ (SRXDataImage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SRXDataImage*)[[[SRXDataImage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SRXDataImage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SRXDataImage*)[[[SRXDataImage builder] mergeFromCodedInputStream:input] build];
}
+ (SRXDataImage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SRXDataImage*)[[[SRXDataImage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SRXDataImageBuilder*) builder {
  return [[SRXDataImageBuilder alloc] init];
}
+ (SRXDataImageBuilder*) builderWithPrototype:(SRXDataImage*) prototype {
  return [[SRXDataImage builder] mergeFrom:prototype];
}
- (SRXDataImageBuilder*) builder {
  return [SRXDataImage builder];
}
- (SRXDataImageBuilder*) toBuilder {
  return [SRXDataImage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", self.data];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasData) {
    [dictionary setObject: self.data forKey: @"data"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SRXDataImage class]]) {
    return NO;
  }
  SRXDataImage *otherMessage = other;
  return
      self.hasData == otherMessage.hasData &&
      (!self.hasData || [self.data isEqual:otherMessage.data]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasData) {
    hashCode = hashCode * 31 + [self.data hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SRXDataImageBuilder()
@property (strong) SRXDataImage* resultSrxdataImage;
@end

@implementation SRXDataImageBuilder
@synthesize resultSrxdataImage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSrxdataImage = [[SRXDataImage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSrxdataImage;
}
- (SRXDataImageBuilder*) clear {
  self.resultSrxdataImage = [[SRXDataImage alloc] init];
  return self;
}
- (SRXDataImageBuilder*) clone {
  return [SRXDataImage builderWithPrototype:resultSrxdataImage];
}
- (SRXDataImage*) defaultInstance {
  return [SRXDataImage defaultInstance];
}
- (SRXDataImage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SRXDataImage*) buildPartial {
  SRXDataImage* returnMe = resultSrxdataImage;
  self.resultSrxdataImage = nil;
  return returnMe;
}
- (SRXDataImageBuilder*) mergeFrom:(SRXDataImage*) other {
  if (other == [SRXDataImage defaultInstance]) {
    return self;
  }
  if (other.hasData) {
    [self setData:other.data];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SRXDataImageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SRXDataImageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasData {
  return resultSrxdataImage.hasData;
}
- (NSData*) data {
  return resultSrxdataImage.data;
}
- (SRXDataImageBuilder*) setData:(NSData*) value {
  resultSrxdataImage.hasData = YES;
  resultSrxdataImage.data = value;
  return self;
}
- (SRXDataImageBuilder*) clearData {
  resultSrxdataImage.hasData = NO;
  resultSrxdataImage.data = [NSData data];
  return self;
}
@end

@interface SRXDataImageServerTypeEnum ()
@end

@implementation SRXDataImageServerTypeEnum

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static SRXDataImageServerTypeEnum* defaultSRXDataImageServerTypeEnumInstance = nil;
+ (void) initialize {
  if (self == [SRXDataImageServerTypeEnum class]) {
    defaultSRXDataImageServerTypeEnumInstance = [[SRXDataImageServerTypeEnum alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSRXDataImageServerTypeEnumInstance;
}
- (instancetype) defaultInstance {
  return defaultSRXDataImageServerTypeEnumInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SRXDataImageServerTypeEnum*) parseFromData:(NSData*) data {
  return (SRXDataImageServerTypeEnum*)[[[SRXDataImageServerTypeEnum builder] mergeFromData:data] build];
}
+ (SRXDataImageServerTypeEnum*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SRXDataImageServerTypeEnum*)[[[SRXDataImageServerTypeEnum builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SRXDataImageServerTypeEnum*) parseFromInputStream:(NSInputStream*) input {
  return (SRXDataImageServerTypeEnum*)[[[SRXDataImageServerTypeEnum builder] mergeFromInputStream:input] build];
}
+ (SRXDataImageServerTypeEnum*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SRXDataImageServerTypeEnum*)[[[SRXDataImageServerTypeEnum builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SRXDataImageServerTypeEnum*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SRXDataImageServerTypeEnum*)[[[SRXDataImageServerTypeEnum builder] mergeFromCodedInputStream:input] build];
}
+ (SRXDataImageServerTypeEnum*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SRXDataImageServerTypeEnum*)[[[SRXDataImageServerTypeEnum builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SRXDataImageServerTypeEnumBuilder*) builder {
  return [[SRXDataImageServerTypeEnumBuilder alloc] init];
}
+ (SRXDataImageServerTypeEnumBuilder*) builderWithPrototype:(SRXDataImageServerTypeEnum*) prototype {
  return [[SRXDataImageServerTypeEnum builder] mergeFrom:prototype];
}
- (SRXDataImageServerTypeEnumBuilder*) builder {
  return [SRXDataImageServerTypeEnum builder];
}
- (SRXDataImageServerTypeEnumBuilder*) toBuilder {
  return [SRXDataImageServerTypeEnum builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SRXDataImageServerTypeEnum class]]) {
    return NO;
  }
  SRXDataImageServerTypeEnum *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL SRXDataImageServerTypeEnumImageServerTypeIsValidValue(SRXDataImageServerTypeEnumImageServerType value) {
  switch (value) {
    case SRXDataImageServerTypeEnumImageServerTypeUnknown:
    case SRXDataImageServerTypeEnumImageServerTypeParse:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromSRXDataImageServerTypeEnumImageServerType(SRXDataImageServerTypeEnumImageServerType value) {
  switch (value) {
    case SRXDataImageServerTypeEnumImageServerTypeUnknown:
      return @"SRXDataImageServerTypeEnumImageServerTypeUnknown";
    case SRXDataImageServerTypeEnumImageServerTypeParse:
      return @"SRXDataImageServerTypeEnumImageServerTypeParse";
    default:
      return nil;
  }
}

@interface SRXDataImageServerTypeEnumBuilder()
@property (strong) SRXDataImageServerTypeEnum* resultSrxdataImageServerTypeEnum;
@end

@implementation SRXDataImageServerTypeEnumBuilder
@synthesize resultSrxdataImageServerTypeEnum;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSrxdataImageServerTypeEnum = [[SRXDataImageServerTypeEnum alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSrxdataImageServerTypeEnum;
}
- (SRXDataImageServerTypeEnumBuilder*) clear {
  self.resultSrxdataImageServerTypeEnum = [[SRXDataImageServerTypeEnum alloc] init];
  return self;
}
- (SRXDataImageServerTypeEnumBuilder*) clone {
  return [SRXDataImageServerTypeEnum builderWithPrototype:resultSrxdataImageServerTypeEnum];
}
- (SRXDataImageServerTypeEnum*) defaultInstance {
  return [SRXDataImageServerTypeEnum defaultInstance];
}
- (SRXDataImageServerTypeEnum*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SRXDataImageServerTypeEnum*) buildPartial {
  SRXDataImageServerTypeEnum* returnMe = resultSrxdataImageServerTypeEnum;
  self.resultSrxdataImageServerTypeEnum = nil;
  return returnMe;
}
- (SRXDataImageServerTypeEnumBuilder*) mergeFrom:(SRXDataImageServerTypeEnum*) other {
  if (other == [SRXDataImageServerTypeEnum defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SRXDataImageServerTypeEnumBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SRXDataImageServerTypeEnumBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface SRXDataImageRef ()
@property SRXDataImageServerTypeEnumImageServerType serverType;
@property (strong) NSString* imageKey;
@end

@implementation SRXDataImageRef

- (BOOL) hasServerType {
  return !!hasServerType_;
}
- (void) setHasServerType:(BOOL) _value_ {
  hasServerType_ = !!_value_;
}
@synthesize serverType;
- (BOOL) hasImageKey {
  return !!hasImageKey_;
}
- (void) setHasImageKey:(BOOL) _value_ {
  hasImageKey_ = !!_value_;
}
@synthesize imageKey;
- (instancetype) init {
  if ((self = [super init])) {
    self.serverType = SRXDataImageServerTypeEnumImageServerTypeUnknown;
    self.imageKey = @"";
  }
  return self;
}
static SRXDataImageRef* defaultSRXDataImageRefInstance = nil;
+ (void) initialize {
  if (self == [SRXDataImageRef class]) {
    defaultSRXDataImageRefInstance = [[SRXDataImageRef alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSRXDataImageRefInstance;
}
- (instancetype) defaultInstance {
  return defaultSRXDataImageRefInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasServerType) {
    [output writeEnum:1 value:self.serverType];
  }
  if (self.hasImageKey) {
    [output writeString:2 value:self.imageKey];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasServerType) {
    size_ += computeEnumSize(1, self.serverType);
  }
  if (self.hasImageKey) {
    size_ += computeStringSize(2, self.imageKey);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SRXDataImageRef*) parseFromData:(NSData*) data {
  return (SRXDataImageRef*)[[[SRXDataImageRef builder] mergeFromData:data] build];
}
+ (SRXDataImageRef*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SRXDataImageRef*)[[[SRXDataImageRef builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SRXDataImageRef*) parseFromInputStream:(NSInputStream*) input {
  return (SRXDataImageRef*)[[[SRXDataImageRef builder] mergeFromInputStream:input] build];
}
+ (SRXDataImageRef*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SRXDataImageRef*)[[[SRXDataImageRef builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SRXDataImageRef*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SRXDataImageRef*)[[[SRXDataImageRef builder] mergeFromCodedInputStream:input] build];
}
+ (SRXDataImageRef*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SRXDataImageRef*)[[[SRXDataImageRef builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SRXDataImageRefBuilder*) builder {
  return [[SRXDataImageRefBuilder alloc] init];
}
+ (SRXDataImageRefBuilder*) builderWithPrototype:(SRXDataImageRef*) prototype {
  return [[SRXDataImageRef builder] mergeFrom:prototype];
}
- (SRXDataImageRefBuilder*) builder {
  return [SRXDataImageRef builder];
}
- (SRXDataImageRefBuilder*) toBuilder {
  return [SRXDataImageRef builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasServerType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverType", NSStringFromSRXDataImageServerTypeEnumImageServerType(self.serverType)];
  }
  if (self.hasImageKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imageKey", self.imageKey];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasServerType) {
    [dictionary setObject: @(self.serverType) forKey: @"serverType"];
  }
  if (self.hasImageKey) {
    [dictionary setObject: self.imageKey forKey: @"imageKey"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SRXDataImageRef class]]) {
    return NO;
  }
  SRXDataImageRef *otherMessage = other;
  return
      self.hasServerType == otherMessage.hasServerType &&
      (!self.hasServerType || self.serverType == otherMessage.serverType) &&
      self.hasImageKey == otherMessage.hasImageKey &&
      (!self.hasImageKey || [self.imageKey isEqual:otherMessage.imageKey]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasServerType) {
    hashCode = hashCode * 31 + self.serverType;
  }
  if (self.hasImageKey) {
    hashCode = hashCode * 31 + [self.imageKey hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SRXDataImageRefBuilder()
@property (strong) SRXDataImageRef* resultSrxdataImageRef;
@end

@implementation SRXDataImageRefBuilder
@synthesize resultSrxdataImageRef;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSrxdataImageRef = [[SRXDataImageRef alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSrxdataImageRef;
}
- (SRXDataImageRefBuilder*) clear {
  self.resultSrxdataImageRef = [[SRXDataImageRef alloc] init];
  return self;
}
- (SRXDataImageRefBuilder*) clone {
  return [SRXDataImageRef builderWithPrototype:resultSrxdataImageRef];
}
- (SRXDataImageRef*) defaultInstance {
  return [SRXDataImageRef defaultInstance];
}
- (SRXDataImageRef*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SRXDataImageRef*) buildPartial {
  SRXDataImageRef* returnMe = resultSrxdataImageRef;
  self.resultSrxdataImageRef = nil;
  return returnMe;
}
- (SRXDataImageRefBuilder*) mergeFrom:(SRXDataImageRef*) other {
  if (other == [SRXDataImageRef defaultInstance]) {
    return self;
  }
  if (other.hasServerType) {
    [self setServerType:other.serverType];
  }
  if (other.hasImageKey) {
    [self setImageKey:other.imageKey];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SRXDataImageRefBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SRXDataImageRefBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        SRXDataImageServerTypeEnumImageServerType value = (SRXDataImageServerTypeEnumImageServerType)[input readEnum];
        if (SRXDataImageServerTypeEnumImageServerTypeIsValidValue(value)) {
          [self setServerType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setImageKey:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasServerType {
  return resultSrxdataImageRef.hasServerType;
}
- (SRXDataImageServerTypeEnumImageServerType) serverType {
  return resultSrxdataImageRef.serverType;
}
- (SRXDataImageRefBuilder*) setServerType:(SRXDataImageServerTypeEnumImageServerType) value {
  resultSrxdataImageRef.hasServerType = YES;
  resultSrxdataImageRef.serverType = value;
  return self;
}
- (SRXDataImageRefBuilder*) clearServerType {
  resultSrxdataImageRef.hasServerType = NO;
  resultSrxdataImageRef.serverType = SRXDataImageServerTypeEnumImageServerTypeUnknown;
  return self;
}
- (BOOL) hasImageKey {
  return resultSrxdataImageRef.hasImageKey;
}
- (NSString*) imageKey {
  return resultSrxdataImageRef.imageKey;
}
- (SRXDataImageRefBuilder*) setImageKey:(NSString*) value {
  resultSrxdataImageRef.hasImageKey = YES;
  resultSrxdataImageRef.imageKey = value;
  return self;
}
- (SRXDataImageRefBuilder*) clearImageKey {
  resultSrxdataImageRef.hasImageKey = NO;
  resultSrxdataImageRef.imageKey = @"";
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
